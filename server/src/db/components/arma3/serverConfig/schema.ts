import joi from "joi";
import { Schema } from "mongoose";
import { Arma3ServerConfig } from "shared";

import {
  DBArma3VoteCommandSchema,
  arma3VoteCommandSchema,
} from "../voteCommand/schema";

export const DBArma3ServerConfigSchema = new Schema<Arma3ServerConfig>({
  hostname: {
    type: String,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
  passwordAdmin: {
    type: String,
    required: true,
  },
  serverCommandPassword: {
    type: String,
    required: true,
  },
  maxPlayers: {
    type: Number,
    required: false,
    default: 64,
  },
  motd: {
    type: [String],
    required: false,
    default: [],
  },
  admins: {
    type: [String],
    required: false,
    default: [],
  },
  headlessClients: {
    type: [String],
    required: false,
    default: [],
  },
  localClient: {
    type: [String],
    required: false,
    default: [],
  },
  filePatchingExceptions: {
    type: [String],
    required: false,
    default: [],
  },
  voteThreshold: {
    type: Number,
    required: false,
    default: 0.5,
  },
  voteMissionPlayers: {
    type: Number,
    required: false,
    default: 3,
  },
  allowedVoteCmds: {
    type: [DBArma3VoteCommandSchema],
    required: false,
    default: [],
  },
  allowedVotedAdminCmds: {
    type: [DBArma3VoteCommandSchema],
    required: false,
    default: [],
  },
  kickDuplicate: {
    type: Boolean,
    required: false,
    default: true,
  },
  loopback: {
    type: Boolean,
    required: false,
    default: false,
  },
  upnp: {
    type: Boolean,
    required: false,
    default: false,
  },
  allowedFilePatching: {
    type: Boolean,
    required: false,
    default: false,
  },
  allowedLoadFileExtensions: {
    type: [String],
    required: false,
    default: [],
  },
  allowedPreprocessFileExtensions: {
    type: [String],
    required: false,
    default: [],
  },
  allowedHTMLLoadExtensions: {
    type: [String],
    required: false,
    default: [],
  },
  allowedHTMLLoadURIs: {
    type: [String],
    required: false,
    default: [],
  },
  disconnectTimeout: {
    type: Number,
    required: false,
    default: 90,
  },
  maxDesync: {
    type: Number,
    required: false,
    default: 100,
  },
  maxPing: {
    type: Number,
    required: false,
    default: 500,
  },
  maxPacketLoss: {
    type: Number,
    required: false,
    default: 50,
  },
  kickClientsOnSlowNetwork: {
    type: [Boolean],
    required: false,
    default: [false, false, false, false],
  },
  enablePlayerDiag: {
    type: Boolean,
    required: false,
    default: false,
  },
  callExtReportLimit: {
    type: Number,
    required: false,
    default: 1000,
  },
  kickTimeout: {
    type: [[Number]],
    required: false,
    default: [
      [0, -1],
      [1, 180],
      [2, 180],
      [3, 180],
    ],
  },
  votingTimeout: {
    type: Number,
    required: false,
    default: 60,
  },
  roleTimeout: {
    type: Number,
    required: false,
    default: 90,
  },
  briefingTimeout: {
    type: Number,
    required: false,
    default: 60,
  },
  debriefingTimeout: {
    type: Number,
    required: false,
    default: 45,
  },
  lobbyIdleTimeout: {
    type: Number,
    required: false,
    default: 300,
  },
  missionsToServerRestart: {
    type: Number,
    required: false,
    default: 8,
  },
  missionsToShutdown: {
    type: Number,
    required: false,
    default: 16,
  },
  autoSelectMission: {
    type: Boolean,
    required: false,
    default: false,
  },
  randomMissionOrder: {
    type: Boolean,
    required: false,
    default: false,
  },
  disableChannels: {
    type: [Object],
    required: false,
    default: [],
  },
  verifySignatures: {
    type: Number,
    required: false,
    default: 2,
  },
  drawingInMap: {
    type: Boolean,
    required: false,
    default: true,
  },
  disableVoN: {
    type: Boolean,
    required: false,
    default: false,
  },
  vonCodecQuality: {
    type: Number,
    required: false,
    default: 3,
  },
  vonCodec: {
    type: Number,
    required: false,
    default: 0,
  },
  skipLobby: {
    type: Boolean,
    required: false,
    default: false,
  },
  allowProfileGlasses: {
    type: Boolean,
    required: false,
    default: true,
  },
  zeusCompositionScriptLevel: {
    type: Number,
    required: false,
    default: 1,
  },
  logFile: {
    type: String,
    required: false,
    default: "server_console.log",
  },
  doubleIdDetected: {
    type: String,
    required: false,
    default: "",
  },
  onUserConnected: {
    type: String,
    required: false,
    default: "",
  },
  onUserDisconnected: {
    type: String,
    required: false,
    default: "",
  },
  onHackedData: {
    type: String,
    required: false,
    default: "",
  },
  onDifferentData: {
    type: String,
    required: false,
    default: "",
  },
  onUnsignedData: {
    type: String,
    required: false,
    default: "",
  },
  onUserKick: {
    type: String,
    required: false,
    default: "",
  },
  regularCheck: {
    type: String,
    required: false,
    default: "",
  },
  battlEye: {
    type: Boolean,
    required: false,
    default: true,
  },
  timeStampFormat: {
    type: String,
    required: false,
    default: "",
  },
  forceRotorLibSimulation: {
    type: Number,
    required: false,
    default: 0,
  },
  persistent: {
    type: Boolean,
    required: false,
    default: false,
  },
  requiredBuild: {
    type: String,
    required: false,
    default: "",
  },
  statisticsEnabled: {
    type: Boolean,
    required: false,
    default: true,
  },
  forceDifficulty: {
    type: String,
    required: false,
    default: "",
  },
  missionWhitelist: {
    type: [String],
    required: false,
    default: [],
  },
  steamProtocolMaxPacketSize: {
    type: Number,
    required: false,
    default: 1024,
  },
  logObjectNotFound: {
    type: Boolean,
    required: false,
    default: true,
  },
  skipDescriptionParsing: {
    type: Boolean,
    required: false,
    default: false,
  },
  ignoreMissionLoadErrors: {
    type: Boolean,
    required: false,
    default: false,
  },
  queueSizeLogG: {
    type: Number,
    required: false,
    default: 1000000,
  },
  armaUnitsTimeout: {
    type: Number,
    required: false,
    default: 30,
  },
});

export const arma3ServerConfigSchema: joi.ObjectSchema<Arma3ServerConfig> =
  joi.object({
    hostname: joi.string().required(),
    password: joi.string().required(),
    passwordAdmin: joi.string().required(),
    serverCommandPassword: joi.string().required(),
    maxPlayers: joi.number().optional(),
    motd: joi.array().items(joi.string()).optional(),
    admins: joi.array().items(joi.string()).optional(),
    headlessClients: joi.array().items(joi.string()).optional(),
    localClient: joi.array().items(joi.string()).optional(),
    filePatchingExceptions: joi.array().items(joi.string()).optional(),
    voteThreshold: joi.number().optional(),
    voteMissionPlayers: joi.number().optional(),
    allowedVoteCmds: joi.array().items(arma3VoteCommandSchema).optional(),
    allowedVotedAdminCmds: joi.array().items(arma3VoteCommandSchema).optional(),
    kickDuplicate: joi.boolean().optional(),
    loopback: joi.boolean().optional(),
    upnp: joi.boolean().optional(),
    allowedFilePatching: joi.boolean().optional(),
    allowedLoadFileExtensions: joi.array().items(joi.string()).optional(),
    allowedPreprocessFileExtensions: joi.array().items(joi.string()).optional(),
    allowedHTMLLoadExtensions: joi.array().items(joi.string()).optional(),
    allowedHTMLLoadURIs: joi.array().items(joi.string()).optional(),
    disconnectTimeout: joi.number().optional(),
    maxDesync: joi.number().optional(),
    maxPing: joi.number().optional(),
    maxPacketLoss: joi.number().optional(),
    kickClientsOnSlowNetwork: joi.array().items(joi.boolean()).optional(),
    enablePlayerDiag: joi.boolean().optional(),
    callExtReportLimit: joi.number().optional(),
    kickTimeout: joi.array().items(joi.array().items(joi.number())).optional(),
    votingTimeout: joi.number().optional(),
    roleTimeout: joi.number().optional(),
    briefingTimeout: joi.number().optional(),
    debriefingTimeout: joi.number().optional(),
    lobbyIdleTimeout: joi.number().optional(),
    missionsToServerRestart: joi.number().optional(),
    missionsToShutdown: joi.number().optional(),
    autoSelectMission: joi.boolean().optional(),
    randomMissionOrder: joi.boolean().optional(),
    disableChannels: joi.array().items(joi.object()).optional(),
    verifySignatures: joi.number().optional(),
    drawingInMap: joi.boolean().optional(),
    disableVoN: joi.boolean().optional(),
    vonCodecQuality: joi.number().optional(),
    vonCodec: joi.number().optional(),
    skipLobby: joi.boolean().optional(),
    allowProfileGlasses: joi.boolean().optional(),
    zeusCompositionScriptLevel: joi.number().optional(),
    logFile: joi.string().optional(),
    doubleIdDetected: joi.string().optional(),
    onUserConnected: joi.string().optional(),
    onUserDisconnected: joi.string().optional(),
    onHackedData: joi.string().optional(),
    onDifferentData: joi.string().optional(),
    onUnsignedData: joi.string().optional(),
    onUserKick: joi.string().optional(),
    regularCheck: joi.string().optional(),
    battlEye: joi.boolean().optional(),
    timeStampFormat: joi.string().optional(),
    forceRotorLibSimulation: joi.number().optional(),
    persistent: joi.boolean().optional(),
    requiredBuild: joi.string().optional(),
    statisticsEnabled: joi.boolean().optional(),
    forceDifficulty: joi.string().optional(),
    missionWhitelist: joi.array().items(joi.string()).optional(),
    steamProtocolMaxPacketSize: joi.number().optional(),
    logObjectNotFound: joi.boolean().optional(),
    skipDescriptionParsing: joi.boolean().optional(),
    ignoreMissionLoadErrors: joi.boolean().optional(),
    queueSizeLogG: joi.number().optional(),
    armaUnitsTimeout: joi.number().optional(),
  });
